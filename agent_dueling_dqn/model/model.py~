import torch.nn as nn


class Model(nn.Module):
    def __init__(self, state_dim, action_dim):
        super(Model, self).__init__()
        print("dueling_dqn")
        # 共享特征提取层
        self.feature_layer = nn.Sequential(
            nn.Linear(state_dim, 128),
            nn.ReLU(),
            nn.Linear(128, 128),
            nn.ReLU()
        )

        # 状态价值分支 (输出标量)
        self.V_branch = nn.Sequential(
            nn.Linear(128, 64),
            nn.ReLU(),
            nn.Linear(64, 1)
        )

        # 动作优势分支 (输出向量)
        self.A_branch = nn.Sequential(
            nn.Linear(128, 64),
            nn.ReLU(),
            nn.Linear(64, action_dim)
        )

    def forward(self, x):
        features = self.feature_layer(x)
        V = self.V_branch(features)  # 形状 [batch_size, 1]
        A = self.A_branch(features)  # 形状 [batch_size, action_dim]

        # 归一化：A - mean(A)
        Q = V + (A - A.mean(dim=1, keepdim=True))
        return Q
